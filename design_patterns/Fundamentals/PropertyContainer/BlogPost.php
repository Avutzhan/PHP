<?php


namespace App\PropertyContainer;

//Есть начальный класс в который мы не хотим добавлять новые свойства и изменять его
//Можно реализовать по разному но суть одна дополнительные свойства добавляются динамически
//вместо того чтобы менять сам класс мы добавляем новые свойства в
//некоторый контейнер свойств непосредственно в самом обьекте

//Достоинства
//Шаблон контейнер свойств позволяет легко и быстро придать приложению способность изменяться в процессе своего
// жизненного цикла и хорошо подходит для определённых типов приложений, в частности, для реализации возможности
// иерархии вложения. В некоторый случаях, без применения данного шаблона не удастся при возможности динамического
// расширения объекта инкапсулировать данные в объекте, что влияет на безопасность и надежность приложения.

//Недостатки
//При реализации контейнера свойств теряется строгая типизация. Интерфейс класса не полностью описывает
// содержание и, возможно, потребуется модифицировать интерфейс взаимодействия с классом, чтобы реализовать
// преимущества, полученные от добавленных атрибутов. Если используется сохранение объектов в базу данных,
// контейнер свойств требует написать реализацию для передачи данных из контейнера свойств объекта в таблицу.
// Использование контейнера свойств увеличивает сложность системы, вносит накладные расходы
// на потребление памяти приложением и частично снижает быстродействие при работе.
class BlogPost extends PropertyContainer
{
    private $title;

    private $category_id;

    public function getTitle()
    {
        return $this->title;
    }

    public function setTitle($title)
    {
        $this->title = $title;
    }

    public function getCategory()
    {
        return $this->category_id;
    }

    public function setCategory($id)
    {
        $this->category_id = $id;
    }


}