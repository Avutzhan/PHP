* Повторить базовую алгебру стр 20
* Знать хотя бы один язык программирования

Бинарный поиск - это алгоритм, на входе он получает отсортированный спикос элементов
обязательно отсортированный. Если элемент который вы ищете присутствует в списке то
бинарный поиск возвращает ту позицию индекс массива в которой он был найдет. В противном случает бинарный
поиск вернет null.

чтобы найти какое то число в массиве от 1 до 100 в линейном поиске мы должны сделать 100 попыток
а вот в бинарном поиске нам потребуется всего 7 попыток
потому что при бинарном поиске каждый раз исключается половина чисел
100 = 50, 25, 13, 7, 4, 2, 1
например загадал 57.
надо говорить больше или меньше загаданного числа.
начинаем с 50.
50 меньше 57 значит
все числа до 50 исключаем
остается от 50 до 100.
попытка 2 это число 75.
75 больше 57 значит
от 75 до 100 исключаем.
остается от 50 до 75.
попытка 3 середина будет 63. 63 больше 57 значит
остается от 50 до 63 и так далее пока не найдем то число

получается список из 100 элементов потребует 7 шагов
список из 240 000 элементов потребует 18 шагов

240 = 120, 60, 30, 15, 7.5, 3750, 1875, 938, 469, 235, 118, 59, 30, 15, 8, 4, 2, 1
18 шагов

* В общем для списка из n элементов бинарный поиск выполняется за log n шагов, тогда как
                                                                     2
  простой поиск будет выполнен за n шагов

* Логарифмы операция обратная возведению в степень

* Возведение в степень например
      2
  1) 2  = 8 ,2 нужно умножить 2 раза на саму себя чтобы получить 8
      4
  2) 2  = 16, 2 нужно цмножить 4 раза чтобы получить 16

  отсюда и вывод

  1) log 8 = 3, логарифм 8 равен 3 то есть мы 2 умножаем на саму себя 3 раза чтобы получить 8
        2
  2) log 16 = 4, логарифм 16 равет 4 то есть 2 умножаем на саму себя 4 раза чтобы получить 16
        2

  получается log  100 означает сколько раз нужно умножить 10 на саму себя чтобы получить 10 ответ 2
                10

* log всегда означает log
                         2
Когда мы ищем элемент с применением простого поиска в худшем случае нам придется проверять каждый элемент
из списка 8 чисел понадобится не больше 8 попыток
Для бинарного поиска в худшем случае потребуется не более log n проверок. Если есть список 8 элементов
                                                             2
это можно обозначить так log 8 или просто log 8 сколько действий нужно совершить чтобы получить результат 8 равно 3 действия
                            2
вот таким образом можно вычислять количество попыток в бинарном поиске
                                                        10
Для списка из 1024 элементов log 1024 = 10, потому что 2   == 1024
                                2
следовательно из списка 1024 элементов проверка будет 10 попыток.

* Бинарный поиск работает только с отсортированными по порядку элементами
* В примере будем использовать массив
и так пример в отдельном файле тут в папке

упражнение 1
                                                      7
Для списка из 128 элементов log 128 = 7, потому что 2   == 128
                               2
ответ 7

упражнение 2

128 увеличилось на 2 = 256. log 256 = 8, потому что 2 в 8 степени == 256

стр 29

Время выполнения

O(n) линейное время
* Линейное время выполнения алгоритма это когда из списка 100 чисел мы проверям каждле число
таким образом получается сколько элементов списке столько и проверок если в списке 4 миллиарда
элементов то мы выполним 4 миллиарда проверок

O(Log n) логарифмическое время
В бинарном поиске все по другому если список состоит из 100 элементов то попыток булет 7
если же 4 миллиарда элементов то попыток будет не больше 32
* это и есть логарифмическое время

стр 29



































