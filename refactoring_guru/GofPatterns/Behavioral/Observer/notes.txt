Также известен как: Издатель-Подписчик, Слушатель, Observer

Наблюдатель — это поведенческий паттерн
проектирования, который создаёт механизм подписки,
позволяющий одним объектам следить и реагировать на
события, происходящие в других объектах.

плюсы

Издатели не зависят от конкретных классов подписчиков и
наоборот.

Вы можете подписывать и отписывать получателей на лету.

Реализует принцип открытости/закрытости.

минусы

Подписчики оповещаются в случайном порядке.

Отношения с другими паттернами

Цепочка обязанностей, Команда, Посредник и Наблюдатель
показывают различные способы работы отправителей
запросов с их получателями:
◦ Цепочка обязанностей передаёт запрос последовательно
через цепочку потенциальных получателей, ожидая, что
какой-то из них обработает запрос.
◦ Команда устанавливает косвенную одностороннюю связь
от отправителей к получателям.

Посредник убирает прямую связь между отправителями
и получателями, заставляя их общаться опосредованно,
через себя.
◦ Наблюдатель передаёт запрос одновременно всем заин-
тересованным получателям, но позволяет им динамиче-
ски подписываться или отписываться от таких
оповещений.

Разница между Посредником и Наблюдателем не всегда
очевидна. Чаще всего они выступают как конкуренты, но
иногда могут работать вместе.
Цель Посредника — убрать обоюдные зависимости между
компонентами системы. Вместо этого они становятся зависи-
мыми от самого посредника. С другой стороны, цель Наблю-
дателя — обеспечить динамическую одностороннюю связь,
в которой одни объекты косвенно зависят от других.
Довольно популярна реализация Посредника при помощи
Наблюдателя. При этом объект посредника будет выступать
издателем, а все остальные компоненты станут подписчика-
ми и смогут динамически следить за событиями, происхо-
дящими в посреднике. В этом случае трудно понять, чем же
отличаются оба паттерна.
Но Посредник имеет и другие реализации, когда отдельные
компоненты жёстко привязаны к объекту посредника. Такой
код вряд ли будет напоминать Наблюдателя, но всё же оста-
нется Посредником.

Напротив, в случае реализации посредника с помощью
Наблюдателя представим такую программу, в которой каж-
дый компонент системы становится издателем. Компоненты
могут подписываться друг на друга, в то же время не при-
вязываясь к конкретным классам. Программа будет состоять
из целой сети Наблюдателей, не имея центрального объек-
та-Посредника.