Также известен как: CoR, Chain of Command, Chain of Responsibility

Цепочка обязанностей — это поведенческий паттерн
проектирования, который позволяет передавать запросы
последовательно по цепочке обработчиков. Каждый
последующий обработчик решает, может ли он обработать
запрос сам и стоит ли передавать запрос дальше по цепи.

плюсы

Уменьшает зависимость между клиентом и обработчиками.

Реализует принцип единственной обязанности.

Реализует принцип открытости/закрытости.

минусы

Запрос может остаться никем не обработанным.

Отношения с другими паттернами

Цепочка обязанностей, Команда, Посредник и Наблюдатель
показывают различные способы работы отправителей
запросов с их получателями:
◦ Цепочка обязанностей передаёт запрос последовательно
через цепочку потенциальных получателей, ожидая, что
какой-то из них обработает запрос.
◦ Команда устанавливает косвенную одностороннюю связь
от отправителей к получателям.
◦ Посредник убирает прямую связь между отправителями
и получателями, заставляя их общаться опосредованно,
через себя.
◦ Наблюдатель передаёт запрос одновременно всем заин-
тересованным получателям, но позволяет им динамиче-
ски подписываться или отписываться от таких
оповещений.

Цепочку обязанностей часто используют вместе с Компо-
новщиком. В этом случае запрос передаётся от дочерних
компонентов к их родителям.

Обработчики в Цепочке обязанностей могут быть выполне-
ны в виде Команд. В этом случае множество разных опера-
ций может быть выполнено над одним и тем же контекстом,
коим является запрос.

Но есть и другой подход, в котором сам запрос является
Командой, посланной по цепочке объектов. В этом случае
одна и та же операция может быть выполнена над множе-
ством разных контекстов, представленных в виде цепочки.

Цепочка обязанностей и Декоратор имеют очень похожие
структуры. Оба паттерна базируются на принципе рекурсив-
ного выполнения операции через серию связанных объек-
тов. Но есть и несколько важных отличий.

Обработчики в Цепочке обязанностей могут выполнять про-
извольные действия, независимые друг от друга, а также в
любой момент прерывать дальнейшую передачу по цепочке.
С другой стороны Декораторы расширяют какое-то опреде-
лённое действие, не ломая интерфейс базовой операции и
не прерывая выполнение остальных декораторов.

