Также известен как: Strategy

Конкурент паттерна стратегия анонимные функции

Стратегия — это поведенческий паттерн проектирования,
который определяет семейство схожих алгоритмов и
помещает каждый из них в собственный класс, после чего
алгоритмы можно взаимозаменять прямо во время
исполнения программы.

плюсы

Горячая замена алгоритмов на лету.

Изолирует код и данные алгоритмов от остальных классов.

Уход от наследования к делегированию.

Реализует принцип открытости/закрытости.

минусы

Усложняет программу за счёт дополнительных классов.

Клиент должен знать, в чём состоит разница между страте-
гиями, чтобы выбрать подходящую.

Отношения с другими паттернами

Мост, Стратегия и Состояние (а также слегка и Адаптер)
имеют схожие структуры классов — все они построены на
принципе «композиции», то есть делегирования работы дру-
гим объектам. Тем не менее, они отличаются тем, что решают
разные проблемы. Помните, что паттерны — это не только
рецепт построения кода определённым образом, но и опи-
сание проблем, которые привели к данному решению.

Команда и Стратегия похожи по духу, но отличаются мас-
штабом и применением:

Команду используют, чтобы превратить любые разнород-
ные действия в объекты. Параметры операции превра-
щаются в поля объекта. Этот объект теперь можно
логировать, хранить в истории для отмены, передавать во
внешние сервисы и так далее.
◦ С другой стороны, Стратегия описывает разные способы
произвести одно и то же действие, позволяя взаимозаме-
нять эти способы в каком-то объекте контекста.

Стратегия меняет поведение объекта «изнутри», а Декора-
тор изменяет его «снаружи».

Шаблонный метод использует наследование, чтобы расши-
рять части алгоритма. Стратегия использует делегирование,
чтобы изменять выполняемые алгоритмы на лету. Шаблон-
ный метод работает на уровне классов. Стратегия позволя-
ет менять логику отдельных объектов.

Состояние можно рассматривать как надстройку над Страте-
гией. Оба паттерна используют композицию, чтобы менять
поведение основного объекта, делегируя работу вложенным
объектам-помощникам. Однако в Стратегии эти объекты не
знают друг о друге и никак не связаны. В Состоянии сами
конкретные состояния могут переключать контекст.

Например, паттерн Стратегия в современных языках можно реализовать простой анонимной (лямбда) функцией.
