Также известен как: Обёртка, Decorator
Декоратор — это структурный паттерн проектирования,
который позволяет динамически добавлять объектам новую
функциональность, оборачивая их в полезные «обёртки».

Одним из способов обойти эти проблемы является меха-
низм композиции. Это когда один объект содержит ссылку
на другой и делегирует ему работу, вместо того чтобы само-
му наследовать его поведение. Как раз на этом принципе
построен паттерн Декоратор.

Декоратор имеет альтернативное название — обёртка. Оно
более точно описывает суть паттерна: вы помещаете целе-
вой объект в другой объект-обёртку, который запускает
базовое поведение объекта, а затем добавляет к результату
что-то своё.

плюсы

Большая гибкость, чем у наследования.

Позволяет добавлять обязанности на лету.

Можно добавлять несколько новых обязанностей сразу.

Позволяет иметь несколько мелких объектов вместо одного
объекта на все случаи жизни.

минусы

Трудно конфигурировать многократно обёрнутые объекты.

Обилие крошечных классов.

Отношения с другими паттернами

Адаптер меняет интерфейс существующего объекта. Декора-
тор улучшает другой объект без изменения его интерфейса.
Причём Декоратор поддерживает рекурсивную вложен-
ность, чего не скажешь об Адаптере.

Адаптер предоставляет классу альтернативный интерфейс.
Декоратор предоставляет расширенный интерфейс. Заме-
ститель предоставляет тот же интерфейс.

Цепочка обязанностей и Декоратор имеют очень похожие
структуры. Оба паттерна базируются на принципе рекурсив-
ного выполнения операции через серию связанных объек-
тов. Но есть и несколько важных отличий.

Обработчики в Цепочке обязанностей могут выполнять про-
извольные действия, независимые друг от друга, а также в
любой момент прерывать дальнейшую передачу по цепочке.
С другой стороны Декораторы расширяют какое-то опреде-
лённое действие, не ломая интерфейс базовой операции и
не прерывая выполнение остальных декораторов.

Компоновщик и Декоратор имеют похожие структуры клас-
сов из-за того, что оба построены на рекурсивной вложен-
ности. Она позволяет связать в одну структуру бесконечное
количество объектов.
Декоратор оборачивает только один объект, а узел Компо-
новщика может иметь много детей. Декоратор добавляет
вложенному объекту новую функциональность, а Компонов-
щик не добавляет ничего нового, но «суммирует» результаты
всех своих детей.
Но они могут и сотрудничать: Компоновщик может использо-
вать Декоратор, чтобы переопределить функции отдельных
частей дерева компонентов.

Архитектура, построенная на Компоновщиках и Декорато-
рах, часто может быть улучшена за счёт внедрения Прототи-
па. Он позволяет клонировать сложные структуры объектов,
а не собирать их заново.

Стратегия меняет поведение объекта «изнутри», а Декора-
тор изменяет его «снаружи».

Декоратор и Заместитель имеют схожие структуры, но раз-
ные назначения. Они похожи тем, что оба построены на
композиции и делегируют работу другим объектам. Паттер-
ны отличаются тем, что Заместитель сам управляет жизнью
сервисного объекта, а обёртывание Декораторов контроли-
руется клиентом.



