Компоновщик — это структурный паттерн проектирования,
который позволяет сгруппировать множество объектов в
древовидную структуру, а затем работать с ней так, как
будто это единичный объект.

плюсы

Упрощает архитектуру клиента при работе со сложным
деревом компонентов.

Облегчает добавление новых видов компонентов.

минусы

Создаёт слишком общий дизайн классов.

Отношения с другими паттернами

Строитель позволяет пошагово сооружать дерево Компо-
новщика.

Цепочку обязанностей часто используют вместе с Компо-
новщиком. В этом случае запрос передаётся от дочерних
компонентов к их родителям.

Вы можете обходить дерево Компоновщика, используя Ите-
ратор.

Вы можете выполнить какое-то действие над всем деревом
Компоновщика при помощи Посетителя.

Компоновщик часто совмещают с Легковесом, чтобы реали-
зовать общие ветки дерева и сэкономить при этом память.

Компоновщик и Декоратор имеют похожие структуры клас-
сов из-за того, что оба построены на рекурсивной вложен-
ности. Она позволяет связать в одну структуру бесконечное
количество объектов.
Декоратор оборачивает только один объект, а узел Компо-
новщика может иметь много детей. Декоратор добавляет
вложенному объекту новую функциональность, а Компонов-
щик не добавляет ничего нового, но «суммирует» результаты
всех своих детей.
Но они могут и сотрудничать: Компоновщик может использо-
вать Декоратор, чтобы переопределить функции отдельных
частей дерева компонентов.

Архитектура, построенная на Компоновщиках и Декорато-
рах, часто может быть улучшена за счёт внедрения Прототи-
па. Он позволяет клонировать сложные структуры объектов,
а не собирать их заново.

