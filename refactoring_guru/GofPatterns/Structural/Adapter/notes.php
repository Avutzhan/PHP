Адаптер — это структурный паттерн проектирования, который позволяет
объектам с несовместимыми интерфейсами работать вместе.

плюсы

Отделяет и скрывает от клиента подробности преобразова-
ния различных интерфейсов.

минусы

Усложняет код программы из-за введения дополнительных
классов.

Отношения с другими паттернами

Мост проектируют загодя, чтобы развивать большие части
приложения отдельно друг от друга. Адаптер применяется
постфактум, чтобы заставить несовместимые классы рабо-
тать вместе.

Адаптер меняет интерфейс существующего объекта. Декора-
тор улучшает другой объект без изменения его интерфейса.
Причём Декоратор поддерживает рекурсивную вложен-
ность, чего не скажешь об Адаптере.

Адаптер предоставляет классу альтернативный интерфейс.
Декоратор предоставляет расширенный интерфейс. Заме-
ститель предоставляет тот же интерфейс.

Фасад задаёт новый интерфейс, тогда как Адаптер повторно
использует старый. Адаптер оборачивает только один класс,
а Фасад оборачивает целую подсистему. Кроме того, Адап-
тер позволяет двум существующим интерфейсам работать
сообща, вместо того, чтобы задать полностью новый.

Мост, Стратегия и Состояние (а также слегка и Адаптер)
имеют схожие структуры классов — все они построены на
принципе «композиции», то есть делегирования работы дру-
гим объектам. Тем не менее, они отличаются тем, что решают
разные проблемы. Помните, что паттерны — это не только
рецепт построения кода определённым образом, но и опи-
сание проблем, которые привели к данному решению.