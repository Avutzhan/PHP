Фабричный метод — это порождающий паттерн
проектирования, который определяет общий интерфейс для
создания объектов в суперклассе, позволяя подклассам
изменять тип создаваемых объектов.

Паттерн Фабричный метод предлагает создавать объекты не
напрямую, используя оператор new , а через вызов особого
фабричного метода. Не пугайтесь, объекты всё равно будут
создаваться при помощи new , но делать это будет фабрич-
ный метод.

Плюсы
Избавляет класс от привязки к конкретным классам
продуктов.
Выделяет код производства продуктов в одно место, упро-
щая поддержку кода.
Упрощает добавление новых продуктов в программу.
Реализует принцип открытости/закрытости.

Минус
Может привести к созданию больших параллельных иерар-
хий классов, так как для каждого класса продукта надо
создать свой подкласс создателя.

Многие архитектуры начинаются с применения Фабричного
метода (более простого и расширяемого через подклассы) и
эволюционируют в сторону Абстрактной фабрики, Прототи-
па или Строителя (более гибких, но и более сложных).

Классы Абстрактной фабрики чаще всего реализуются с
помощью Фабричного метода, хотя они могут быть построе-
ны и на основе Прототипа.

Фабричный метод можно использовать вместе с Итерато-
ром, чтобы подклассы коллекций могли создавать подходя-
щие им итераторы.

Прототип не опирается на наследование, но ему нужна
сложная операция инициализации. Фабричный метод, на-
оборот, построен на наследовании, но не требует сложной
инициализации.

Фабричный метод можно рассматривать как частный случай
Шаблонного метода. Кроме того, Фабричный метод нередко
бывает частью большого класса с Шаблонными методами.